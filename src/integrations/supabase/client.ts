
// This file is automatically generated. Do not edit it directly.
import { createClient } from '@supabase/supabase-js';
import type { Database } from './types';

const SUPABASE_URL = "https://pixsfsjgqxkgljzxfkrz.supabase.co";
const SUPABASE_PUBLISHABLE_KEY = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InBpeHNmc2pncXhrZ2xqenhma3J6Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NDc0NjkzMTIsImV4cCI6MjA2MzA0NTMxMn0.ep3ewxqJJyhNAMlkWS3Tc85HnsJrU0_7jWALoMyvqdg";

// Import the supabase client like this:
// import { supabase } from "@/integrations/supabase/client";

export const supabase = createClient<Database>(SUPABASE_URL, SUPABASE_PUBLISHABLE_KEY, {
  auth: {
    persistSession: true,
    autoRefreshToken: true,
    detectSessionInUrl: false,
    storage: typeof window !== 'undefined' ? window.localStorage : undefined,
    flowType: 'pkce',
    // Configurazioni specifiche per Chrome e stabilità della sessione
    storageKey: 'sb-auth-token',
    debug: false
  },
  global: {
    headers: {
      'X-Client-Info': 'wedding-planner@1.0.0'
    }
  },
  realtime: {
    heartbeatIntervalMs: 30000,
    reconnectAfterMs: () => 1000
  }
});

// Configurazione per gestire la visibilità del documento
if (typeof window !== 'undefined') {
  // Gestione quando la tab diventa visibile/nascosta
  document.addEventListener('visibilitychange', () => {
    if (!document.hidden) {
      // Tab è diventata visibile - verifica la sessione
      console.log('Tab became visible, checking session');
      supabase.auth.getSession().then(({ data: { session }, error }) => {
        if (error) {
          console.error('Error checking session on visibility change:', error);
        } else if (session) {
          console.log('Session verified on tab focus');
        }
      });
    }
  });

  // Heartbeat per mantenere viva la sessione
  let heartbeatInterval: NodeJS.Timeout;
  
  const startHeartbeat = () => {
    heartbeatInterval = setInterval(async () => {
      try {
        const { data: { session } } = await supabase.auth.getSession();
        if (session) {
          console.log('Session heartbeat - alive');
        }
      } catch (error) {
        console.error('Heartbeat error:', error);
      }
    }, 60000); // Ogni minuto
  };

  const stopHeartbeat = () => {
    if (heartbeatInterval) {
      clearInterval(heartbeatInterval);
    }
  };

  // Avvia heartbeat quando la sessione è attiva
  supabase.auth.onAuthStateChange((event, session) => {
    if (event === 'SIGNED_IN' && session) {
      startHeartbeat();
    } else if (event === 'SIGNED_OUT') {
      stopHeartbeat();
    }
  });
}
